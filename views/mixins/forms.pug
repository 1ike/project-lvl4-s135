- const getInputName = (f, property) => `${f.name}[${property}]`

mixin formFor(f, options = {})
  - const url = _.get(options, 'url');
  - const method = _.get(options, 'method', 'get').toLowerCase();
  - const isStandart = _.includes(['get', 'post'], method);
  - const clss = _.get(options, 'clss');
  - if (clss) attributes.class = clss;
  form(action= url method= isStandart ? method : 'post')&attributes(attributes)
    if !isStandart
      input(name='_method' type='hidden' value= method)
    block

mixin input(f, property, options = { as: 'text' })
  - const value = f.object[property] === undefined ? options.val || '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
    if (options.as !== 'hidden')
      label= options.label || property
    input(name=getInputName(f, property) class='form-control' type=options.as value=`${value}`)
    if f.errors[property]
      .form-control-feedback= f.errors[property].map(({ message }) => message).join('. ')

mixin select(f, property, range, fieldsForChoice, options = {})
  - const value = f.object[property] || options.default || ''
  .form-group(class=(f.errors[property] && 'has-danger'))
    label= options.label || property
    select.custom-select(name=getInputName(f, property) class='form-control')
      if (!value)
        option(selected value='')= options.placeholder || '...'
      each item in range
        - const result = fieldsForChoice.map(i => item[i]).join(' : ');
        if (value === item.id)
          option(value=item.id selected)= result
        else
          option(value=item.id)= result
    if f.errors[property]
      .form-control-feedback= f.errors[property].map(({ message }) => message).join('. ')

mixin button(f, value = 'Save', clss = 'btn', type = 'submit')
  .form-group
    input(class=`${clss}` type=`${type}` value=`${value}`)
